---
title: "App Canary - Application Health Monitor"
format: 
    email:
        page-layout: full
---

```{python}
#| echo: false
#| label: setup

import json
import os
import requests
import datetime
import pandas as pd
from posit import connect
from IPython.display import HTML, display

# Used to display on-screen setup instructions if environment variables are missing
show_instructions = False
instructions = []

# Used to display on-screen error messages if API errors occur
show_error = False
error_message = ""
error_guid = ""

# Read CONNECT_SERVER from environment, this is automatically configured on Connect, set manually for local dev
connect_server = os.environ.get("CONNECT_SERVER", "")
if not connect_server:
    show_instructions = True
    instructions.append("Please set the <b>CONNECT_SERVER</b> environment variable.")

# Read CONNECT_API_KEY from environment, this is automatically configured on Connect, set manually for local dev
api_key = os.environ.get("CONNECT_API_KEY", "")
if not api_key:
    show_instructions = True
    instructions.append("Please set the <b>CONNECT_API_KEY</b> environment variable.")

# Read CANARY_GUID from environment, needs to be manually configured on Connect and for local dev
canary_guid = os.environ.get("CANARY_GUID", "")
if not canary_guid:
    show_instructions = True
    instructions.append("Please set the <b>CANARY_GUID</b> environment variable. It should be the GUID of the content you wish to monitor.")
    canary_guid = ""

# Instantiate a Connect client using posit-sdk where api_key and url are automatically read from our environment vars
client = connect.Client()
```

```{python}
#| echo: false
#| label: data-gathering

# Define status constants
STATUS_PASS = "PASS"
STATUS_FAIL = "FAIL"
ERROR_PREFIX = "ERROR:"

if not show_instructions:
    # Proceed to validate our monitored GUIDS

    # Headers for Connect API
    headers = {
        "Authorization": f"Key {api_key}",
        # Set a custom user agent to enable filtering App Canary activity in Connect instrumentation data
        "User-Agent": "AppCanary/1.0",
    }

    # Check if server is reachable, would only be a potential problem during local dev
    try:
        server_check = requests.get(
            f"{connect_server}/__ping__", 
            headers=headers, 
            timeout=5
        )
        server_check.raise_for_status()
    except requests.exceptions.RequestException as e:
        raise RuntimeError(f"Connect server at {connect_server} is unavailable: {str(e)}")

    # Helper function to extract error messages from exceptions
    def format_error_message(exception):
        """Extract a clean error message from various exception types"""
        error_message = str(exception)
        
        # posit-sdk will return a ClientError if there is a problem getting the guid, parse the error message
        if isinstance(exception, connect.errors.ClientError):
            try:
                # ClientError from posit-connect SDK stores error as string that contains JSON
                # Convert the string representation to a dict
                error_data = json.loads(str(exception))
                if isinstance(error_data, dict):
                    # Extract the specific error message
                    if "error_message" in error_data:
                        error_message = error_data["error_message"]
                    elif "error" in error_data:
                        error_message = error_data["error"]
            except json.JSONDecodeError:
                # If parsing fails, keep the original error message
                pass
        
        return error_message
    
    # Function to get app details from Connect API
    def get_content(guid):
        try:
            # Get app details from Connect API
            content = client.content.get(guid)
            return content
        except Exception as e:
            # Extract error message and return error object
            error_message = format_error_message(e)
            
            # Return content with error in title
            return {
                "title": f"{ERROR_PREFIX} {error_message}", 
                "guid": guid
            }

    def get_user(user_guid):
        try:
            user = client.users.get(user_guid)
            return user
        except Exception as e:
            error_message = format_error_message(e)
            raise RuntimeError(f"Error getting user: {error_message}")

    # Function to validate app health (simple HTTP 200 check)
    def validate_app(guid):
        # Get app details
        content = get_content(guid)

        app_name = content.get("title", "")
        # Title is optional, if not set use name
        if not app_name:
            app_name = content.get("name", "")
        
        # Ensure we have a valid URL
        dashboard_url = content.get("dashboard_url", "")
        content_url = content.get("content_url", "")
        content_guid = content.get("guid", guid)  # Use the passed guid if not in content

        # Initialize default owner information
        owner_email = ""
        owner_full_name = ""
        
        # Get additional data if we don't have an error when attempting to get the content details
        if not str(app_name).startswith("ERROR:"):
            # Get content owner details
            try:
                owner_guid = content.get("owner_guid")
                if owner_guid:
                    # Get owner details
                    owner = get_user(owner_guid)
                    owner_email = owner.get("email", "")
                    owner_first_name = owner.get("first_name", "")
                    owner_last_name = owner.get("last_name", "")
                    owner_full_name = f"{owner_first_name} {owner_last_name}".strip()
                    if not owner_full_name:  # Handle case where both names are empty
                        owner_full_name = "Unknown"
            except Exception as e:
                # If there's an error getting the owner, keep the defaults
                print(f"Warning: Could not retrieve owner for {guid}: {str(e)}")
        
        # Compose URL to logs if we have a dashboard URL, only owner/editor have access
        if dashboard_url and content.get("app_role") != "viewer":
            logs_url = f"{dashboard_url}/logs"
        else:
            logs_url = ""

        try:
            # Use the content_url if available, otherwise construct one so we get a proper status code
            if content_url:
                app_url = content_url
            else:
                # Likely hit error condition in get_content() thus no content_url available
                app_url = f"{connect_server}/content/{guid}"
            app_response = requests.get(
                app_url, 
                headers=headers,
                timeout=60, # Max time to wait for a response from the content
                allow_redirects=True  # Enabled by default in Python requests, included for clarity
            )
            
            return {
                # App details
                "guid": guid,
                "name": app_name,
                "dashboard_url": dashboard_url,
                "logs_url": logs_url,
                # Owner details
                "owner_name": owner_full_name,
                "owner_email": owner_email,
                # Monitoring status
                "status": "PASS" if app_response.status_code >= 200 and app_response.status_code < 300 else "FAIL",
                "http_code": app_response.status_code
            }

        except Exception as e:
            return {
                # App details
                "guid": guid,
                "name": app_name,
                "dashboard_url": dashboard_url,
                "logs_url": logs_url,
                # Owner details
                "owner_name": owner_full_name,
                "owner_email": owner_email,
                # Monitoring status
                "status": "FAIL",
                "http_code": str(e)
            }

    # Helper function to check if a result has an error
    def has_error(result):
        """Check if a result contains an error message in the name field"""
        return result["name"].startswith(ERROR_PREFIX) if result and "name" in result else False
    
    # Helper function to extract error details from a result
    def extract_error_details(result):
        """Extract error message and GUID from a result"""
        if has_error(result):
            return {
                "message": result["name"].replace(f"{ERROR_PREFIX} ", ""),
                "guid": result.get("guid", "")
            }
        return None
        
    # Check the app and collect result
    results = []
    result = None
    if canary_guid:
        result = validate_app(canary_guid)
        results.append(result)
        
        # Check if there was an error with the GUID
        if has_error(result):
            show_error = True
            error_details = extract_error_details(result)
            error_message = error_details["message"]
            error_guid = error_details["guid"]

    # Convert results to DataFrame for easy display
    df = pd.DataFrame(results)

    # Store the current time
    check_time = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
```


```{python}
#| echo: false
#| label: display

# Define CSS styling constants
CSS_COLORS = {
    "neutral": {
        "border": "#ccc",
        "background": "#f8f9fa",
        "text": "#000"
    },
    "error": {
        "border": "#cc0000",
        "background": "#fff8f8",
        "text": "#cc0000"
    },
    "warning": {
        "border": "#f0ad4e",
        "background": "#fcf8e3",
        "text": "#cc0000"
    },
    "success": {
        "border": "#4caf50",
        "background": "#e8f5e9",
        "text": "#28a745"
    },
    "fail": {
        "border": "#f44336",
        "background": "#ffebee",
        "text": "#dc3545"
    }
}

CSS_BOX_STYLE = "border: 1px solid {border}; border-radius: 8px; padding: 10px; margin-bottom: 15px; background-color: {background};"
CSS_HEADER_STYLE = "margin-top: 0; padding-bottom: 8px; border-bottom: 1px solid #eaecef; font-weight: bold; font-size: 1.2em;"
CSS_CONTENT_STYLE = "padding: 5px 0;"
CSS_FOOTER_STYLE = "padding-top: 8px; font-size: 0.9em; border-top: 1px solid #eaecef;"
CSS_GRID_STYLE = "display: grid; grid-template-columns: 150px auto; grid-gap: 8px; padding: 10px 0;"

# Define helper functions for generating HTML components

def create_about_box(about_content):
    """Creates the About callout box HTML"""
    neutral = CSS_COLORS["neutral"]
    return f"""
    <div style="{CSS_BOX_STYLE.format(border=neutral['border'], background=neutral['background'])}"> 
        <div style="{CSS_HEADER_STYLE}">ℹ️ About</div>
        <div style="{CSS_CONTENT_STYLE}">{about_content}</div>
    </div>
    """

def create_error_box(guid, error_msg):
    """Creates the Error callout box HTML"""
    error = CSS_COLORS["error"]
    return f"""
    <div style="{CSS_BOX_STYLE.format(border=error['border'], background=error['background'])}"> 
        <div style="{CSS_HEADER_STYLE}; color: {error['text']}">⚠️ Error Monitoring Content</div>
        
        <div style="{CSS_GRID_STYLE}; margin-top: 10px; padding-bottom: 8px; border-bottom: 1px solid #eaecef;">
            <div style="font-weight: bold;">Content GUID:</div>
            <div>{guid}</div>
            
            <div style="font-weight: bold;">Error:</div>
            <div style="color: {error['text']};">{error_msg}</div>
        </div>
        
        <div style="{CSS_FOOTER_STYLE}">
            Please check that your CANARY_GUID environment variable contains a valid content identifier.
        </div>
    </div>
    """

def create_no_results_box():
    """Creates the No Results callout box HTML"""
    warning = CSS_COLORS["warning"]
    error_text = CSS_COLORS["error"]["text"]
    return f"""
    <div style="{CSS_BOX_STYLE.format(border=warning['border'], background=warning['background'])}"> 
        <div style="{CSS_HEADER_STYLE}; color: {error_text};">⚠️ No results available</div>
        <div style="{CSS_CONTENT_STYLE}">
            No monitoring results were found. This could be because:
            <ul>
                <li>No valid GUID was provided</li>
                <li>There was an issue connecting to the specified content</li>
                <li>The environment is properly configured but there was an error that caused no data to be returned</li>
            </ul>
            <p>Please check your CANARY_GUID environment variable and ensure it contains a valid content identifier.</p>
        </div>
    </div>
    """

def create_instructions_box(instructions_html_content):
    """Creates the Setup Instructions callout box HTML"""
    error = CSS_COLORS["error"]
    return f"""
    <div style="{CSS_BOX_STYLE.format(border=error['border'], background=error['background'])}"> 
        <div style="{CSS_HEADER_STYLE}; color: {error['text']};">⚠️ Setup Instructions</div>
        {instructions_html_content}
        <div style="{CSS_FOOTER_STYLE}">
            See Posit Connect documentation for <a href='https://docs.posit.co/connect/user/content-settings/#content-vars' target='_blank'>Vars (environment variables)</a>
        </div>
    </div>
    """

# Function to create the report display for a result
def create_report_display(result_data, check_time_value):
    # Format app name with link if dashboard_url is available
    app_name = result_data.get('name', 'Unknown')
    dashboard_url = result_data.get('dashboard_url', '')
    if dashboard_url:
        app_name_display = f"<a href='{dashboard_url}' target='_blank'>{app_name}</a>"
    else:
        app_name_display = app_name
    
    # Get GUID
    app_guid = result_data.get('guid', '')
    
    # Format status with appropriate color
    status = result_data.get('status', '')
    
    if status == STATUS_PASS:
        status_colors = CSS_COLORS["success"]
        status_icon = "✅"  # Checkmark
    else:
        status_colors = CSS_COLORS["fail"]
        status_icon = "❌"  # X mark
    
    # Get HTTP Code
    http_code = result_data.get('http_code', '')
    
    # Format logs link if available
    logs_url = result_data.get('logs_url', '')
    if logs_url:
        logs_display = f"<a href='{logs_url}' target='_blank' style='text-decoration:none;'>📋 View Logs</a>"
    else:
        logs_display = "No logs available (only available to owner and collaborators)"
    
    # Format owner information
    owner_name = result_data.get('owner_name', 'Unknown')
    owner_email = result_data.get('owner_email', '')
    if owner_email:
        owner_display = f"{owner_name} <a href='mailto:{owner_email}' style='text-decoration:none;'>✉️</a>"
    else:
        owner_display = owner_name
    
    # Create last check time display
    check_time_display = f"Last checked: {check_time_value}"
    
    html_output = f"""
    <div style="{CSS_BOX_STYLE.format(border=status_colors['border'], background=status_colors['background'])}">
        <div style="{CSS_HEADER_STYLE}">
            <span style="color: {status_colors['text']};">{status_icon} {status}</span> - Application Status
        </div>
        
        <div style="{CSS_GRID_STYLE}">
            <div style="font-weight: bold;">Name:</div>
            <div>{app_name_display}</div>
            
            <div style="font-weight: bold;">Content GUID:</div>
            <div>{app_guid}</div>
            
            <div style="font-weight: bold;">HTTP Code:</div>
            <div>{http_code}</div>
            
            <div style="font-weight: bold;">Logs:</div>
            <div>{logs_display}</div>
            
            <div style="font-weight: bold;">Owner:</div>
            <div>{owner_display}</div>
        </div>
        
        <div style="text-align: right; font-size: 0.8em; color: #666; {CSS_FOOTER_STYLE}">
            {check_time_display}
        </div>
    </div>
    """
    
    return html_output

about = """<div>
This report uses the publisher's API key to monitor an application GUID, verifies that the monitored app is 
reachable at its content URL, and reports the results. If run on a schedule, reports will be emailed when the monitored 
application reports a failure.
</div>"""

# Always display the About callout box
display(HTML(create_about_box(about)))

if not show_instructions and 'df' in locals() and not df.empty and not show_error:
    # We're working with a single result since we only monitor a single GUID
    result_data = df.iloc[0]
    
    # Use the function to create and display the report
    report_html = create_report_display(result_data, check_time)
    display(HTML(report_html))
    
    # No need for table display since we're using HTML callouts

elif show_error:
    # Create a callout box for API errors
    display(HTML(create_error_box(error_guid, error_message)))
    
    # Using HTML display instead of tables
    
elif show_instructions:
    # Create a callout box for instructions
    instructions_html = ""

    for instruction in instructions:
        instructions_html += f"<div style='margin-bottom: 10px;'>{instruction}</div>"
    
    display(HTML(create_instructions_box(instructions_html)))
    
    # Using HTML display instead of tables
else:
    # We should only hit this catchall if the dataframe is empty (a likely error) and there are no instructions
    display(HTML(create_no_results_box()))
    
    # Using HTML display instead of tables

# Helper function to determine if we should send an email
def should_send_email():
    """Determine if we should send an email notification"""
    # Send email if we have an API error
    if show_error:
        return True
    
    # Send email if at least one app has a failure status
    if 'df' in locals() and not df.empty and 'status' in df.columns:
        return bool(df['status'] == STATUS_FAIL).any()
    
    return False

# Set send_email variable for the quarto email mechanism
send_email = should_send_email()
```


```{python}
#| echo: false

# No need to display anything here since we're displaying HTML directly above
```


::: {.email}

::: {.email-scheduled}
`{python} send_email`
:::

::: {.subject}
App Canary - ❌ one or more apps have failed monitoring
:::

```{python}
#| echo: false

# Always show the about section in the email
display(HTML(create_about_box(about)))

# If there's an API error, display it in the email
if show_error:
    display(HTML(create_error_box(error_guid, error_message)))
elif 'df' in locals() and not df.empty:
    # Display the report-style format in the email
    # We're working with a single result since we only monitor a single GUID
    result_data = df.iloc[0]
    
    # Use the function to create and display the report
    report_html = create_report_display(result_data, check_time)
    display(HTML(report_html))
else:
    # Display a message if neither error nor data is available
    display(HTML(create_no_results_box()))
```
:::

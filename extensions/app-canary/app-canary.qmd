---
title: "App Canary - Application Health Monitor"
format: 
    email:
        page-layout: full
---

```{python}
#| echo: false

import json
import os
import requests
import datetime
import pandas as pd
from posit import connect
from great_tables import GT, style, loc, html
from IPython.display import HTML, display

# Used to display on-screen setup instructions if environment variables are missing
show_instructions = False
instructions = []
gt_tbl = None

# Read CONNECT_SERVER from environment, this is automatically configured on Connect, set manually for local dev
connect_server = os.environ.get("CONNECT_SERVER", "")
if not connect_server:
    show_instructions = True
    instructions.append("Please set the <b>CONNECT_SERVER</b> environment variable.")

# Read CONNECT_API_KEY from environment, this is automatically configured on Connect, set manually for local dev
api_key = os.environ.get("CONNECT_API_KEY", "")
if not api_key:
    show_instructions = True
    instructions.append("Please set the <b>CONNECT_API_KEY</b> environment variable.")

# Read CANARY_GUIDS from environment, needs to be manually configured on Connect and for local dev
canary_guids_str = os.environ.get("CANARY_GUIDS", "")
if not canary_guids_str:
    show_instructions = True
    instructions.append("Please set the <b>CANARY_GUIDS</b> environment variable. It should be a comma separated list of GUID you wish to monitor.")
    canary_guids = []
else:
    # Clean up the GUIDs
    canary_guids = [guid.strip() for guid in canary_guids_str.split(',') if guid.strip()]
    if not canary_guids:
        show_instructions = True
        instructions.append(f"CANARY_GUIDS environment variable is set but is empty or contains only whitespace. It should be a comma separated list of GUID you wish to monitor. Raw CANARY_GUIDS value: '{canary_guids_str}'")

# Instantiate a Connect client using posit-sdk where api_key and url are automatically read from our environment vars
client = connect.Client()

if not show_instructions:
    # Proceed to validate our monitored GUIDS
    # Headers for Connect API
    headers = {"Authorization": f"Key {api_key}"}

    # Check if server is reachable, would only be a potential problem during local dev
    try:
        server_check = requests.get(
            f"{connect_server}/__ping__", 
            headers=headers, 
            timeout=5
        )
        server_check.raise_for_status()
    except requests.exceptions.RequestException as e:
        raise RuntimeError(f"Connect server at {connect_server} is unavailable: {str(e)}")

    # Function to get app details from Connect API
    def get_content(guid):
        try:
            # Get app details from Connect API
            content = client.content.get(guid)
            return content
        except Exception as e:
            # Initialize default error message
            error_message = str(e)
            
            # posit-sdk will return a ClientError if there is a problem getting the guid, parse the error message
            if isinstance(e, connect.errors.ClientError):
                try:
                    # ClientError from posit-connect SDK stores error as string that contains JSON
                    # Convert the string representation to a dict
                    error_data = json.loads(str(e))
                    if isinstance(error_data, dict):
                        # Extract the specific error message
                        if "error_message" in error_data:
                            error_message = error_data["error_message"]
                        elif "error" in error_data:
                            error_message = error_data["error"]
                except json.JSONDecodeError:
                    # If parsing fails, keep the original error message
                    pass
            
            # Return content with error in title
            return {
                "title": f"ERROR: {error_message}", 
                "guid": guid
            }

    # Function to validate app health (simple HTTP 200 check)
    def validate_app(guid):
        # Get app details
        content = get_content(guid)
        app_name = content.get("title", "Unknown")
        
        # Extract URLs
        dashboard_url = content.get("dashboard_url", "")
        content_url = content.get("content_url", "")
        
        try:
            # Use the content_url if available, otherwise construct one so we get a proper status code
            if content_url:
                app_url = content_url
            else:
                # Likely hit error condition in get_content() thus no content_url available
                app_url = f"{connect_server}/content/{guid}"
            app_response = requests.get(
                app_url, 
                headers=headers,
                timeout=60, # Max time to wait for a response from the content
                allow_redirects=True  # Enabled by default in Python requests, included for clarity
            )
            
            return {
                "guid": guid,
                "name": app_name,
                "dashboard_url": dashboard_url,
                "status": "PASS" if app_response.status_code >= 200 and app_response.status_code < 300 else "FAIL",
                "http_code": app_response.status_code
            }

        except Exception as e:
            return {
                "guid": guid,
                "name": app_name,
                "dashboard_url": dashboard_url,
                "status": "FAIL",
                "http_code": str(e)
            }

    # Check all apps and collect results
    results = []
    for guid in canary_guids:
        results.append(validate_app(guid))

    # Convert results to DataFrame for easy display
    df = pd.DataFrame(results)

    # Reorder columns to put name first
    # Create a dynamic column order with name first, status and http_code last
    if 'name' in df.columns:
        cols = ['name']  # Start with name
        # Add any other columns except name, status, and http_code
        middle_cols = [col for col in df.columns if col not in ['name', 'status', 'http_code']]
        cols.extend(middle_cols)
        # Add status and http_code at the end
        if 'status' in df.columns:
            cols.append('status')
        if 'http_code' in df.columns:
            cols.append('http_code')
        # Reorder the DataFrame
        df = df[cols]

    # Store the current time
    check_time = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
```


```{python}
#| echo: false

about = """<div style="margin-bottom: 10px;">
This report uses the publisher's API key to monitor a list of application GUIDs, verifies each of the monitored apps are 
reachable at their content URL, and reports the results. If run on a schedule, reports will be emailed when any monitored 
application reports a failure.
</div>"""

if not show_instructions and not df.empty:
    
    # Format the canary_guids as a string for display
    canary_guids_str = ", ".join(canary_guids)
    
    # Use HTML to create a callout box
    display(HTML(f"""
    <div style="border: 1px solid #ccc; border-radius: 8px; padding: 10px; margin-bottom: 15px; background-color: #f8f9fa;">
        <div style="margin-top: 0; padding-bottom: 8px; border-bottom: 1px solid #eaecef; font-weight: bold; font-size: 1.2em;">App Canary Monitor</div>
        <div style="padding: 5px 0;">{about}</div>
        <div style="margin-top: 10px; padding-top: 8px; border-top: 1px solid #eaecef; font-weight: bold;">Monitored GUIDs:</div>
        <div style="padding: 5px 0;">{canary_guids_str}</div>
    </div>
    """))
    
    # First create links for name and guid columns
    df_display = df.copy()
    
    # Process the DataFrame rows to add HTML links
    for i in range(len(df_display)):
        if not pd.isna(df_display.loc[i, 'dashboard_url']) and df_display.loc[i, 'dashboard_url']:
            url = df_display.loc[i, 'dashboard_url']
            df_display.loc[i, 'name'] = f"<a href='{url}' target='_blank'>{df_display.loc[i, 'name']}</a>"
            df_display.loc[i, 'guid'] = f"<a href='{url}' target='_blank'>{df_display.loc[i, 'guid']}</a>"
    
    # Remove dashboard_url column since the links are embedded in the other columns
    if 'dashboard_url' in df_display.columns:
        df_display = df_display.drop(columns=['dashboard_url'])
    
    # Create GT table
    gt_tbl = GT(df_display)
    
    # Apply styling to status column
    gt_tbl = (gt_tbl
              .tab_style(
                  style.fill("green"),
                  locations=loc.body(columns="status", rows=lambda df: df["status"] == "PASS")
              )
              .tab_style(
                  style.fill("red"),
                  locations=loc.body(columns="status", rows=lambda df: df["status"] == "FAIL")
              ))
elif show_instructions:
    # Create a callout box for instructions
    instructions_html = about  # Start with the about message
    for instruction in instructions:
        instructions_html += f"<div style='margin-bottom: 10px;'>{instruction}</div>"
    
    display(HTML(f"""
    <div style="border: 1px solid #cc0000; border-radius: 8px; padding: 10px; margin-bottom: 15px; background-color: #fff8f8;">
        <div style="margin-top: 0; padding-bottom: 8px; border-bottom: 1px solid #eaecef; color: #cc0000; font-weight: bold; font-size: 1.2em;">⚠️ Setup Instructions</div>
        {instructions_html}
        <div style="padding-top: 8px; font-size: 0.9em; border-top: 1px solid #eaecef;">
            See Posit Connect documentation for <a href='https://docs.posit.co/connect/user/content-settings/#content-vars' target='_blank'>Vars (environment variables)</a>
        </div>
    </div>
    """))
    
    # Set gt_tbl to None since we're using HTML display instead
    gt_tbl = None
else:
    # We should only hit this catchall if the dataframe is empty (a likely error) and there are no instructions
    display(HTML(f"""
    <div style="border: 1px solid #f0ad4e; border-radius: 8px; padding: 10px; margin-bottom: 15px; background-color: #fcf8e3;">
        <div style="margin-top: 0; padding-bottom: 8px; border-bottom: 1px solid #eaecef; color: #cc0000; font-weight: bold; font-size: 1.2em;">⚠️ No results available</div>
        <div style="padding: 5px 0;">
            No monitoring results were found. This could be because:
            <ul>
                <li>No valid GUIDs were provided</li>
                <li>There was an issue connecting to the specified content</li>
                <li>The environment is properly configured but there was an error that caused no data to be returned</li>
            </ul>
            <p>Please check your CANARY_GUIDS environment variable and ensure it contains valid content identifiers.</p>
        </div>
    </div>
    """))
    
    # Set gt_tbl to None since we're using HTML display instead
    gt_tbl = None

# Compute if we should send an email, only send if at least one app has a failure
if 'df' in locals() and 'status' in df.columns:
    send_email = bool(not df.empty and (df['status'] == 'FAIL').any())
else:
    send_email = False
```


```{python}
#| echo: false

# Display the table in the rendered document HTML, email is handled separately below
gt_tbl
```


::: {.email}

::: {.email-scheduled}
`{python} send_email`
:::

::: {.subject}
App Canary - ❌ one or more apps have failed monitoring
:::

```{python}
#| echo: false
gt_tbl
```
:::

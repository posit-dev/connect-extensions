import { ref, computed } from "vue";
import { defineStore } from "pinia";

import { useContentStore, type ContentListItem } from "./content";
import { usePackagesStore, type Package } from "./packages";
import { useVulnsStore, type Vulnerability } from "./vulns";

export interface DetailedPackage extends Package {
  vulnerabilities: Vulnerability[];
  latestFixedVersion: string | null;
}

export interface Content extends ContentListItem {
  packages: DetailedPackage[];
  vulnerabilityCount: number;
  isLoadingPackages: boolean;
  packageFetchError?: Error;
}

export const useScannerStore = defineStore("scanner", () => {
  const currentContent = ref<Content>();

  const content = computed<Content[]>(() => {
    const contentStore = useContentStore();
    const packagesStore = usePackagesStore();
    const vulnsStore = useVulnsStore();

    return contentStore.contentList.map<Content>((content) => {
      let packages: DetailedPackage[] = [];
      const pkgData = packagesStore.contentItems[content.guid];

      if (packagesStore.contentItems[content.guid]) {
        packages = pkgData.packages.map((pkg) => ({
          ...pkg,
          ...vulnsStore.getDetailsForPackageVersion(
            pkg.name,
            pkg.version,
            pkg.language.toLowerCase() === "python" ? "pypi" : "cran",
          ),
        }));
      }

      const vulnerabilityCount = packages.reduce((acc, pkg) => {
        return acc + pkg.vulnerabilities.length;
      }, 0);

      return {
        ...content,
        isLoadingPackages: pkgData === undefined ? true : pkgData.isLoading,
        packageFetchError: pkgData?.error || undefined,
        packages: packages,
        vulnerabilityCount,
      };
    });
  });

  const contentWithVulnerabilities = computed<Content[]>(() => {
    return content.value.filter((item) => item.vulnerabilityCount > 0);
  });

  const hasContent = computed<boolean>(() => {
    return content.value.length > 0;
  });

  const totalVulnerabilities = computed<number>(() => {
    return content.value.reduce(
      (acc, item) => acc + item.vulnerabilityCount,
      0,
    );
  });

  const anyContentLoadingPackages = computed<boolean>(() => {
    return content.value.some((content) => content.isLoadingPackages);
  });

  return {
    currentContent,
    content,
    contentWithVulnerabilities,
    hasContent,
    totalVulnerabilities,
    anyContentLoadingPackages,
  };
});

---
title: "Content Health Monitor"
format: 
    email:
        page-layout: full
---

```{python}
#| echo: false

# ------ SETUP SECTION ------ #
import json
import os
import requests
import datetime
from posit import connect
from IPython.display import HTML, display
from content_health_utils import *  # Imports everything including MonitorState and DEFAULT_USER_NAME

# Create state object to share between this file and utils
state = MonitorState()

# Initialize state variables that are only used in this Quarto document
show_error = False        # Used to display on-screen error messages if API errors occur
error_message = None      # Error message to display if API errors occur
error_guid = None         # GUID that caused the error
content_result = None     # Variable to store content monitoring result

# Initialize current user name with the default value from utils
current_user_name = DEFAULT_USER_NAME  # Will be updated if user info can be retrieved

# Read environment variables
connect_server = get_env_var("CONNECT_SERVER", state) # Automatically provided by Connect, must be set when previewing locally
api_key = get_env_var("CONNECT_API_KEY", state) # Automatically provided by Connect, must be set when previewing locally
monitored_content_guid = get_env_var("MONITORED_CONTENT_GUID", state)

# Extract GUID if it's a string or URL containing a GUID
if monitored_content_guid:
    monitored_content_guid, guid_error_message = extract_guid(monitored_content_guid)
    # Handle URL with no GUID error
    if guid_error_message:
        state.show_instructions = True
        state.instructions.append(guid_error_message)

# Check if we have the required environment variables to instantiate the client
client = None
has_connect_env_vars = connect_server and api_key

if has_connect_env_vars:
    try:
        # Instantiate a Connect client using posit-sdk
        client = connect.Client()
        
        # Get current user's full name - function handles errors internally
        user_name = get_current_user_full_name(client)
        if user_name != "Unknown":  # Only update if we got a valid name
            current_user_name = user_name
    except ValueError as e:
        if not state.show_instructions:
            state.show_instructions = True
            state.instructions.append(f"<b>Error initializing Connect client:</b> {str(e)}")


# ------ DATA GATHERING SECTION ------ #
# Always record the current time for reporting purposes
check_time = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')


# Only proceed with content validation if we have all requirements
# (state.show_instructions=False already tells us env vars are set and client was initialized)
if not state.show_instructions:
    try:
        # Check if server is reachable
        check_server_reachable(connect_server, api_key)
        
        # Validate the content
        content_result = validate(client, monitored_content_guid, connect_server, api_key)
        
        # Check for content-specific errors
        if has_error(content_result):
            show_error = True
            error_details = extract_error_details(content_result)
            error_message = error_details["message"]
            error_guid = error_details["guid"]
            
    except Exception as e:
        # Handle any unexpected errors during validation
        show_error = True
        error_message = str(e)
        error_guid = monitored_content_guid


# ------ DISPLAY SECTION ------ #
# Create the about content text
about_content = f"""<div>
This report uses {current_user_name}'s API key to monitor a single piece of content. It checks whether the content is 
reachable, but does not verify that it runs without errors.<br><br>
When scheduled to run regularly, the report will send an email alert 
if the content becomes unreachable.
To learn more about scheduling reports in Connect, see the 
<a href="https://docs.posit.co/connect/user/scheduling/index.html" target="_blank">Scheduling documentation</a>.
</div>"""


# Prepare instructions HTML if needed
if state.show_instructions:
    instructions_html = "".join(f"<div style='margin-bottom: 10px;'>{instruction}</div>" for instruction in state.instructions)
else:
    instructions_html = None

# Create all HTML components up front based on state
html_components = {
    'instructions': create_instructions_box(instructions_html) if state.show_instructions else None,
    'error': create_error_box(error_guid, error_message) if show_error else None,
    'report': create_report_display(content_result, check_time, current_user_name) if content_result and not has_error(content_result) else None,
    'no_results': create_no_results_box() if not (state.show_instructions or show_error or 
                                              (content_result and not has_error(content_result))) else None
}

# Always display the About callout box
display(HTML(create_about_box(about_content)))

# Display the first piece of information available from the list of instructions, error, report, etc.
for component in html_components.values():
    if component:
        display(HTML(component))
        break

# Set send_email variable for the quarto email mechanism
send_email = should_send_email(show_error, content_result)
```



::: {.email}

::: {.email-scheduled}
`{python} send_email`
:::

::: {.subject}
`{python} f"‚ùå Content Health Monitor - \"{content_result.get('name', 'Unknown Content') if content_result else 'Unknown Content'}\" has failed monitoring"`
:::

```{python}
#| echo: false

# Always show the about section in the email
display(HTML(create_about_box(about_content)))

# Display the first piece of information available from the list of instructions, error, report, etc.
for component in html_components.values():
    if component:
        display(HTML(component))
        break
```
:::

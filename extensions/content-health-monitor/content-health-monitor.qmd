---
title: "Content Health Monitor"
format: 
    email:
        page-layout: full
---

```{python}
#| echo: false

# ------ SETUP SECTION ------ #
import json
import os
import requests
import datetime
from posit import connect
from IPython.display import HTML, display
from content_health_utils import *

# Used to display on-screen setup instructions if environment variables are missing
show_instructions = False
instructions = []

# Used to display on-screen error messages if API errors occur
show_error = False
error_message = ""
error_guid = ""

# Variable to store content monitoring result
content_result = None

# Read environment variables
connect_server = get_env_var("CONNECT_SERVER") # Automatically provided by Connect, must be set when previewing locally
api_key = get_env_var("CONNECT_API_KEY") # Automatically provided by Connect, must be set when previewing locally
monitored_content_guid = get_env_var("MONITORED_CONTENT_GUID")

# Only instantiate the client if we have the required environment variables
client = None
if not show_instructions:
    try:
        # Instantiate a Connect client using posit-sdk where api_key and url are automatically read from our environment vars
        client = connect.Client()
    except ValueError as e:
        show_instructions = True
        instructions.append(f"<b>Error initializing Connect client:</b> {str(e)}")


# ------ DATA GATHERING SECTION ------ #
if not show_instructions:
    # Proceed to validate our monitored GUID

    # Headers for Connect API
    headers = {
        "Authorization": f"Key {api_key}",
        # Set a custom user agent to enable filtering of activity in Connect instrumentation data
        "User-Agent": "ContentHealthMonitor/1.0",
    }

    # Check if server is reachable using the utility function
    check_server_reachable(connect_server, api_key)
        
    # Check the content and get result
    if monitored_content_guid:
        content_result = validate(client, monitored_content_guid, connect_server, api_key)
        
        # Check if there was an error with the GUID
        if has_error(content_result):
            show_error = True
            error_details = extract_error_details(content_result)
            error_message = error_details["message"]
            error_guid = error_details["guid"]

    # Store the current time
    check_time = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')


# ------ DISPLAY SECTION ------ #
# Create the about content text
about_content = """<div>
This report uses the publisher's API key to monitor a single piece of content. It checks whether the content is 
reachable, but does not validate its functionality. When scheduled to run regularly, it will send an email alert if the 
content becomes unreachable.
</div>"""

# Store HTML components in variables for reuse
about_box_html = create_about_box(about_content)
error_box_html = ""
no_results_box_html = ""
report_box_html = ""

# Generate the appropriate HTML based on the state
if show_error:
    # Create error box HTML
    error_box_html = create_error_box(error_guid, error_message)
elif content_result and not has_error(content_result):
    # Create report box HTML using the function
    report_box_html = create_report_display(content_result, check_time)
else:
    # Create no results box HTML
    no_results_box_html = create_no_results_box()

# Always display the About callout box
display(HTML(about_box_html))

# Display the appropriate content based on the state
if show_instructions:
    # Create a callout box for instructions
    instructions_html = ""
    for instruction in instructions:
        instructions_html += f"<div style='margin-bottom: 10px;'>{instruction}</div>"
    
    # Create and display instructions box
    instructions_box_html = create_instructions_box(instructions_html)
    display(HTML(instructions_box_html))
elif show_error:
    # Display the error box that was already created
    display(HTML(error_box_html))
elif report_box_html:
    # Display the report box that was already created
    display(HTML(report_box_html))
else:
    # Display the no results box that was already created
    display(HTML(no_results_box_html))

# Set send_email variable for the quarto email mechanism
send_email = should_send_email(show_error, content_result)
```



::: {.email}

::: {.email-scheduled}
`{python} send_email`
:::

::: {.subject}
‚ùå Content Health Monitor - `{python} content_result.get('name', 'Unknown') if content_result else 'Unknown'` has failed monitoring
:::

```{python}
#| echo: false

# Always show the about section in the email
display(HTML(about_box_html))

# Display the appropriate content based on the state - use the same HTML as the main report
if show_instructions:
    display(HTML(instructions_box_html))
elif show_error:
    display(HTML(error_box_html))
elif report_box_html:
    display(HTML(report_box_html))
else:
    display(HTML(no_results_box_html))
```
:::

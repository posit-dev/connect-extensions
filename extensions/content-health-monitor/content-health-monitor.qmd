---
title: "Content Health Monitor"
format: 
    email:
        page-layout: full
---

```{python}
#| echo: false

# ------ SETUP SECTION ------ #
import json
import os
import requests
import datetime
from posit import connect
from IPython.display import HTML, display
from content_health_utils import *

# Initialize state variables
show_instructions = False  # Used to display on-screen setup instructions if environment variables are missing
instructions = []         # List to store setup instructions for the user
show_error = False        # Used to display on-screen error messages if API errors occur
error_message = None      # Error message to display if API errors occur
error_guid = None         # GUID that caused the error
content_result = None     # Variable to store content monitoring result

# Read environment variables
connect_server = get_env_var("CONNECT_SERVER") # Automatically provided by Connect, must be set when previewing locally
api_key = get_env_var("CONNECT_API_KEY") # Automatically provided by Connect, must be set when previewing locally
monitored_content_guid = get_env_var("MONITORED_CONTENT_GUID")

# Only instantiate the client if we have the required environment variables
client = None
if not show_instructions:
    try:
        # Instantiate a Connect client using posit-sdk where api_key and url are automatically read from our environment vars
        client = connect.Client()
    except ValueError as e:
        show_instructions = True
        instructions.append(f"<b>Error initializing Connect client:</b> {str(e)}")


# ------ DATA GATHERING SECTION ------ #
# Always record the current time for reporting purposes
check_time = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')

# Only proceed with content validation if we have all requirements
# (show_instructions=False already tells us env vars are set and client was initialized)
if not show_instructions:
    try:
        # Check if server is reachable
        check_server_reachable(connect_server, api_key)
        
        # Validate the content
        content_result = validate(client, monitored_content_guid, connect_server, api_key)
        
        # Check for content-specific errors
        if has_error(content_result):
            show_error = True
            error_details = extract_error_details(content_result)
            error_message = error_details["message"]
            error_guid = error_details["guid"]
            
    except Exception as e:
        # Handle any unexpected errors during validation
        show_error = True
        error_message = str(e)
        error_guid = monitored_content_guid


# ------ DISPLAY SECTION ------ #
# Create the about content text
about_content = """<div>
This report uses the publisher's API key to monitor a single piece of content. It checks whether the content is 
reachable, but does not validate its functionality. When scheduled to run regularly, it will send an email alert if the 
content becomes unreachable.
</div>"""

# Prepare instructions HTML if needed
if show_instructions:
    instructions_html = "".join(f"<div style='margin-bottom: 10px;'>{instruction}</div>" for instruction in instructions)
else:
    instructions_html = None

# Create all HTML components up front based on state
html_components = {
    'about': create_about_box(about_content),
    'instructions': create_instructions_box(instructions_html) if show_instructions else None,
    'error': create_error_box(error_guid, error_message) if show_error else None,
    'report': create_report_display(content_result, check_time) if content_result and not has_error(content_result) else None,
    'no_results': create_no_results_box() if not (show_instructions or show_error or 
                                              (content_result and not has_error(content_result))) else None
}

# Always display the About callout box
display(HTML(html_components['about']))

# Display the appropriate content based on priority
for component_type in ['instructions', 'error', 'report', 'no_results']:
    if html_components[component_type]:
        display(HTML(html_components[component_type]))
        break

# Set send_email variable for the quarto email mechanism
send_email = should_send_email(show_error, content_result)
```



::: {.email}

::: {.email-scheduled}
`{python} send_email`
:::

::: {.subject}
‚ùå Content Health Monitor - `{python} content_result.get('name', 'Unknown') if content_result else 'Unknown'` has failed monitoring
:::

```{python}
#| echo: false

# Always show the about section in the email
display(HTML(html_components['about']))

# Display the appropriate content based on priority - use the same logic as the main report
for component_type in ['instructions', 'error', 'report', 'no_results']:
    if html_components[component_type]:
        display(HTML(html_components[component_type]))
        break
```
:::

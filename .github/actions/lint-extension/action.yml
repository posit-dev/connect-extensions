name: Lint Extension
description: Lint an extension for release

inputs:
  extension-name:
    description: The name of the extension
    required: true
    type: string

runs:
  using: "composite"

  steps:
    - name: Check extension name matches directory
      run: |
        MANIFEST_NAME=$(jq -r '.extension.name' < ./extensions/${{ inputs.extension-name }}/manifest.json)
        if [ ${{ inputs.extension-name }} != $MANIFEST_NAME ]; then
          echo "Error: Extension name, directory, and manifest.json mismatch"
          echo "Extension '${{ inputs.extension-name }}' must be in the folder '/extensions/${{ inputs.extension-name }}'" and have the name '${{ inputs.extension-name }}' in the manifest.json.
          exit 1
        fi
      shell: bash

    # Ensures that the manifest.json for the given extension name
    # contains all the required fields for the rest of the release workflow
    - run: |
        jq '
          if (.extension | type) != "object" then error("Missing extension object")
          elif (.extension.name | type) != "string" then error("Missing extension.name")
          elif (.extension.title | type) != "string" then error("Missing extension.title")
          elif (.extension.description | type) != "string" then error("Missing extension.description")
          elif (.extension.homepage | type) != "string" then error("Missing extension.homepage")
          elif (.extension.minimumConnectVersion | type) != "string" then error("Missing extension.minimumConnectVersion")
          elif (.extension.version | type) != "string" then error("Missing extension.version")
          else . end
        ' ./extensions/${{ inputs.extension-name }}/manifest.json
      shell: bash

    # Ensures that the manifest.json has only valid tags
    - name: Check tags
      run: |
        # Read in valid tags from extensions.json
        VALID_TAGS=$(jq -c '.tags' ./extensions.json)
        
        # Read in tags from the extension's manifest.json
        EXTENSION_TAGS=$(jq -c '.extension.tags // []' ./extensions/${{ inputs.extension-name }}/manifest.json)
        
        # Check if any extension tag is not in the valid tags list
        INVALID_TAGS=$(jq -n -c --argjson global "$VALID_TAGS" --argjson extension "$EXTENSION_TAGS" '
          $extension | map(. as $tag | if ($global | index($tag) | not) then $tag else empty end)
        ')
        
        # Check if there are any invalid tags
        if [ "$INVALID_TAGS" != "[]" ]; then
          echo "Error: The following tags in manifest.json are not defined in extensions.json:"
          echo "$INVALID_TAGS"
          echo "Please add these tags to the 'tags' array in extensions.json or remove them from the manifest."
          exit 1
        fi
      shell: bash
       
    - uses: actions/setup-node@v4

    - run: npm install -g semver
      shell: bash

    # The semver must be valid for the sorting, comparisons, and release
    # process to work
    - name: Check for valid semver
      run: |
        semver -c $(jq -c -r '.extension.version' < ./extensions/${{ inputs.extension-name }}/manifest.json)
      shell: bash

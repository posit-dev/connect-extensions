name: Connect Integration Tests

on:
  workflow_call:
    inputs:
      extensions:
        description: "JSON array of extension names to test"
        required: true
        type: string
    outputs:
      success_matrix:
        description: "Extensions that passed all tests"
        value: ${{ jobs.collect-results.outputs.matrix }}
    secrets:
      CONNECT_LICENSE:
        required: true

jobs:
  setup-integration-test:
    runs-on: ubuntu-latest
    timeout-minutes: 1
    outputs:
      versions: ${{ steps.versions.outputs.versions }}
    steps:
      - uses: actions/checkout@v4
      - id: versions
        working-directory: ./integration
        # The `jq` command is "output compact, raw input, slurp, split on new lines, and remove the last element". This results in a JSON array of Connect versions (e.g., ["2025.01.0", "2024.12.0"]).
        run: |
          versions=$(make print-versions | jq -c -Rs 'split("\n") | .[:-1]')

          # Show processed versions
          echo "Versions: $versions"

          # Set output for next jobs
          echo "versions=$versions" >> "$GITHUB_OUTPUT"

  connect-integration-test:
    runs-on: ubuntu-latest
    timeout-minutes: 10 # Max time to run the integration tests
    needs: setup-integration-test
    strategy:
      fail-fast: false
      matrix:
        extension: ${{ fromJson(inputs.extensions) }}
        connect_version: ${{ fromJson(needs.setup-integration-test.outputs.versions) }}
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/connect-integration-test
        id: test
        with:
          extension-name: ${{ matrix.extension }}
          connect-version: ${{ matrix.connect_version }}
          connect-license: ${{ secrets.CONNECT_LICENSE }}

      - uses: actions/upload-artifact@v4
        if: |
          always() && 
          steps.test.outcome != 'cancelled' && 
          steps.test.outcome != 'skipped'
        with:
          name: ${{ matrix.extension }}-${{ matrix.connect_version }}-test-report
          path: integration/reports/*.xml
          retention-days: 7

  # Analyses the test result files and publishes the results on the GitHub Actions job summary page
  integration-test-report:
    needs: connect-integration-test
    runs-on: ubuntu-latest
    timeout-minutes: 1
    permissions:
      checks: write
      pull-requests: write
    # Only run if tests weren't skipped or cancelled
    if: |
      always() && 
      !contains(needs.connect-integration-test.result, 'skipped') &&
      !contains(needs.connect-integration-test.result, 'cancelled')
    steps:
      - uses: actions/download-artifact@v4
        id: download
        with:
          path: artifacts
          pattern: "*Integration Test Report"

      - uses: EnricoMi/publish-unit-test-result-action@v2
        if: ${{ steps.download.outputs.download-path != '' }}
        with:
          check_name: integration-test-results
          comment_mode: off
          files: "artifacts/**/*.xml"
          report_individual_runs: true

  # Provides a matrix of extensions that passed all of the Connect integration tests
  collect-results:
    needs: [connect-integration-test, setup-integration-test]
    runs-on: ubuntu-latest
    timeout-minutes: 1
    outputs:
      matrix: ${{ steps.collect.outputs.success_matrix }}
    if: |
      !contains(needs.connect-integration-test.result, 'skipped') &&
      !contains(needs.connect-integration-test.result, 'cancelled')
    steps:
      - id: collect
        run: |
          # Validate inputs first
          all_versions='${{ needs.setup-integration-test.outputs.versions }}'
          extensions='${{ inputs.extensions }}'
          
          if [[ -z "$all_versions" || -z "$extensions" ]]; then
            echo "❌ Missing required inputs"
            exit 1
          fi
          
          # Get matrix results from job context
          matrix_results='${{ toJSON(needs.connect-integration-test) }}'

          if [[ -z "$matrix_results" || "$matrix_results" == "{}" ]]; then
            echo "❌ No matrix results found"
            echo "success_matrix=[]" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "Debug: Full matrix context:"
          echo "$matrix_results" | jq '.'
          
          # Get job results for each matrix combination
          job_results=$(echo "$matrix_results" | jq -r '.jobs[] | {
            extension: .matrix.extension,
            version: .matrix.connect_version,
            result: .result
          }')
          
          echo "Debug: Processed job results:"
          echo "$job_results" | jq '.'
          
          echo "🔍 Processing matrix results"
          echo "Versions to check: $all_versions"
          echo "Extensions to check: $extensions"
          
          # Track extensions that passed ALL version tests
          success_list=()
          
          # Process each extension
          for ext in $(echo "$extensions" | jq -r '.[]'); do
            all_passed=true
            echo "📦 Checking extension: $ext"
            
            # Must pass ALL versions
            for version in $(echo "$all_versions" | jq -r '.[]'); do
              echo "🔎 Checking $ext @ $version"
              
              # Get specific matrix combination result
              result=$(echo "$matrix_results" | jq -r \
                --arg ext "$ext" \
                --arg ver "$version" \
                '.jobs[] | select(.matrix.extension == $ext and .matrix.connect_version == $ver) | .result')
              
              if [[ -z "$result" ]]; then
                echo "❌ No result found for $ext @ $version"
                all_passed=false
                break
              elif [[ "$result" != "success" ]]; then
                echo "❌ Failed: $ext @ $version ($result)"
                all_passed=false
                break
              else 
                echo "✅ Passed: $ext @ $version"
              fi
            done
            
            if [[ "$all_passed" == "true" ]]; then
              success_list+=("$ext")
              echo "🎉 SUCCESS: $ext passed ALL versions"
            else
              echo "⚠️ FAILED: $ext failed one or more versions"
            fi
          done
          
          # Format output
          success_matrix=$(jq -n --arg arr "$(IFS=,; echo "${success_list[*]}")" \
            '$arr | split(",")' -c)
          
          if [[ -z "$success_matrix" || "$success_matrix" == "[]" ]]; then
            echo "⚠️ No extensions passed all tests"
            echo "success_matrix=[]" >> $GITHUB_OUTPUT
          else
            echo "📊 Final success matrix: $success_matrix"
            echo "success_matrix=$success_matrix" >> $GITHUB_OUTPUT
          fi
